// Generated by CoffeeScript 1.6.2
(function() {
  var HMAC_SHA1, crypto, exports, special_encode, url, _clean_request_body;

  crypto = require('crypto');

  url = require('url');

  special_encode = function(string) {
    return encodeURIComponent(string).replace(/[!'()]/g, escape).replace(/\*/g, '%2A');
  };

  _clean_request_body = function(body, query) {
    var cleanParams, encodeParam, out;

    out = [];
    encodeParam = function(key, val) {
      return "" + key + "=" + (special_encode(val));
    };
    cleanParams = function(params) {
      var key, val, vals, _i, _len;

      if (typeof params !== 'object') {
        return;
      }
      for (key in params) {
        vals = params[key];
        if (key === 'oauth_signature') {
          continue;
        }
        if (Array.isArray(vals) === true) {
          for (_i = 0, _len = vals.length; _i < _len; _i++) {
            val = vals[_i];
            out.push(encodeParam(key, val));
          }
        } else {
          out.push(encodeParam(key, vals));
        }
      }
    };
    cleanParams(body);
    cleanParams(query);
    return special_encode(out.sort().join('&'));
  };

  HMAC_SHA1 = (function() {
    function HMAC_SHA1() {}

    HMAC_SHA1.prototype.toString = function() {
      return 'HMAC_SHA1';
    };

    HMAC_SHA1.prototype.build_signature_base_string = function(req, consumer_secret, token) {
      var hitUrl, key, parsedUrl, raw, sig;

      parsedUrl = url.parse(req.url, true);
      hitUrl = req.protocol + '://' + req.get('host') + parsedUrl.pathname;
      sig = [req.method.toUpperCase(), special_encode(hitUrl), _clean_request_body(req.body, parsedUrl.query)];
      key = "" + consumer_secret + "&";
      if (token) {
        key += token;
      }
      raw = sig.join('&');
      return [key, raw];
    };

    HMAC_SHA1.prototype.build_signature = function(req, consumer_secret, token) {
      var cipher, hashed, key, raw, _ref;

      _ref = this.build_signature_base_string(req, consumer_secret, token), key = _ref[0], raw = _ref[1];
      cipher = crypto.createHmac('sha1', key);
      return hashed = cipher.update(raw).digest('base64');
    };

    return HMAC_SHA1;

  })();

  exports = module.exports = HMAC_SHA1;

}).call(this);
