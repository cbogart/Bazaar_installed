// Generated by CoffeeScript 1.6.2
(function() {
  var HMAC_SHA1, MemoryNonceStore, Provider, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HMAC_SHA1 = require('./hmac-sha1');

  MemoryNonceStore = require('./memory-nonce-store');

  Provider = (function() {
    Provider.prototype.body = {};

    function Provider(consumer_key, consumer_secret, nonceStore, signature_method) {
      if (signature_method == null) {
        signature_method = new HMAC_SHA1();
      }
      this.parse_request = __bind(this.parse_request, this);
      this.valid_request = __bind(this.valid_request, this);
      if (typeof consumer_key === 'undefined' || consumer_key === null) {
        throw new Error('Must specify consumer_key');
      }
      if (typeof consumer_secret === 'undefined' || consumer_secret === null) {
        throw new Error('Must specify consumer_secret');
      }
      if (!nonceStore) {
        nonceStore = new MemoryNonceStore(consumer_key);
      }
      if (!(typeof nonceStore.isNonceStore === "function" ? nonceStore.isNonceStore() : void 0)) {
        throw new Error('Fourth argument must be a nonceStore object');
      }
      this.consumer_key = consumer_key;
      this.consumer_secret = consumer_secret;
      this.signer = signature_method;
      this.nonceStore = nonceStore;
    }

    Provider.prototype.valid_request = function(req, callback) {
      if (callback == null) {
        callback = function() {};
      }
      this.parse_request(req);
      if (!this._valid_parameters(req)) {
        return callback(new Error('Invalid LTI parameters'), false);
      }
      return this._valid_oauth(req, function(err, valid) {
        return callback(err, valid);
      });
    };

    Provider.prototype._valid_parameters = function(req) {
      var correct_version, corrent_message_type, has_resource_link_id;

      corrent_message_type = req.body.lti_message_type === 'basic-lti-launch-request';
      correct_version = require('./ims-lti').supported_versions.indexOf(req.body.lti_version) !== -1;
      has_resource_link_id = req.body.resource_link_id != null;
      return corrent_message_type && correct_version && has_resource_link_id;
    };

    Provider.prototype._valid_oauth = function(req, callback) {
      var generated, valid_signature;

      generated = this.signer.build_signature(req, this.consumer_secret);
      //console.log(req);
      valid_signature = generated === req.body.oauth_signature;
      if (!valid_signature) {
        return callback(new Error('Invalid Signature'), false);
      }
      return this.nonceStore.isNew(req.body.oauth_nonce, req.body.oauth_timestamp, function(err, valid) {
        if (!valid) {
          return callback(new Error('Expired nonce'), false);
        } else {
          return callback(null, true);
        }
      });
    };

    Provider.prototype.parse_request = function(req) {
      var key, val, _ref;

      _ref = req.body;
      for (key in _ref) {
        val = _ref[key];
        if (key.match(/^oauth_/)) {
          continue;
        }
        this.body[key] = val;
      }
      if (typeof this.body.roles === 'string') {
        this.body.roles = this.body.roles.split(',');
      }
      this.student = this.has_role('learner') || this.has_role('student');
      this.instructor = this.has_role('instructor') || this.has_role('faculty') || this.has_role('staff');
      this.content_developer = this.has_role('ContentDeveloper');
      this.member = this.has_role('Member');
      this.manager = this.has_role('Manager');
      this.mentor = this.has_role('Mentor');
      this.admin = this.has_role('administrator') || this.has_role('teacher');
      this.ta = this.has_role('TeachingAssistant');
      this.launch_request = this.body.lti_message_type === 'basic-lti-launch-request';
      this.outcome_service = !!(this.body.lis_outcome_service_url && this.body.lis_result_sourcedid);
      this.username = this.body.lis_person_name_given || this.body.lis_person_name_family || this.body.lis_person_name_full || '';
      this.userId = this.body.user_id;
      this.context_id = this.body.context_id;
      this.context_label = this.body.context_label;
      this.lis_outcome_service_url = this.body.lis_outcome_service_url;
      this.lis_result_sourcedid = this.body.lis_result_sourcedid;
      return this.context_title = this.body.context_title;
    };

    Provider.prototype.has_role = function(role) {
      var regex;

      role = role.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
      regex = new RegExp("^(urn:lti:role:ims/lis/)?" + role + "$", 'i');
      return this.body.roles && this.body.roles.some(function(r) {
        return regex.test(r);
      });
    };

    return Provider;

  })();

  exports = module.exports = Provider;

}).call(this);
